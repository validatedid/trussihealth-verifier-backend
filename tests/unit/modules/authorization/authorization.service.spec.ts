import { AuthorizationService } from '../../../../src/modules/authorization/authorization.service';
import {
  OauthToken,
  OpenIdApi,
} from '../../../../src/modules/shared/infrastructure/openIdAPI';
import { mock } from 'jest-mock-extended';
import { AuthorizationDto } from '../../../../src/modules/authorization/authorization.controller';

const idTokenForEthrPresentation =
  'eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzozYTFlM2RkYS1iOWVhLTQwYjctOGEwOS0wYjY5ZWQwZDMxMTYiLCJ0eXAiOiJKV1QifQ..k5tCelPjWhlpZFm7CAE_w9wzv2U8FV15L-W_3dY63NGzUtSk5I2v60j5qQY4VvsKVEP3iNFQ3mKJM7YV1LNGkSVub5m92ssejndxS7yp37pPaAzAOV71GVdN1peeYKRAxBnn_Lz8yJKCOJQ6hLUnr4hZ_YtLIlZFcDu8VKojNNcNxq7gU-L1mXLGxWFU6_J-nUJvH0bI1xLc_F_Zo4hhgJO7ZS5WXYLA_dKx9fXwWuv0JkrlIXeKWg_UjdBMthF9jEm3ojGC3n8OI3evGNJCKO590WkA9pEtMqkk6SkECh4K_2jgZu6An7z2aNi3jkrCWagHPRN9pbT7CgWbEr0tsozskEa2rAfMKqEoYS3kjVxp8w4scwgF9V8OThUngsWy0ATi_WpWbTt9Bc79kf1X5sn_dhZ2v8p_uvogMoylUsvS9US02idF3HHskykHTpgoUc-dAaS-y94TuItKjIywKaO3g5M-AxSbTVmJuq2fXVsFtMfbXuT-6yErYiSmd7cKE2aNK7anYyitg2NRMagT4J2e-0XU9h49x1uIwRRxCCuazq7_bxIOCl41Pae1Td-VgpzMyuofCJdg6XgDeW-BmBwSEcnk1dEZ6827-aC_SBCF0kJc3Ra_wZ4-G_A9fEMhccAXkckBEwzOMzjQm8a39V-CmN8cA3EBEmkw1X6NEWc';
const ethrCredential = {
  '@context': [
    'https://www.w3.org/2018/credentials/v1',
    'https://api.vidchain.net/api/v1/contexts/v1',
  ],
  credentialStatus: {
    id: 'https://dev.vidchain.net/api/v1/revocation/credential-status/status-list/209/credential/28',
    statusListCredential:
      'https://dev.vidchain.net/api/v1/revocation/status-list/209',
    statusListIndex: '28',
    type: 'RevocationList2021',
  },
  credentialSubject: {
    id: 'did:ethr:0xEeBBdDFCb5DF121e21d4526CF6b847eFaFc3ff81',
    test: 'newTest',
  },
  id: 'https://api.vidchain.net/api/v1/schemas/9999',
  issuanceDate: '2023-03-13T09:55:21.000Z',
  issuer: {
    id: 'did:ethr:0xE1d82A75E0c595A57550E6E2652b0514C68A60b3',
    name: 'Testing Developers',
  },
  proof: {
    created: '2023-03-13T09:55:21.000Z',
    jws: 'eyJhbGciOiJFUzI1NksiLCJraWQiOiJkaWQ6ZXRocjoweEUxZDgyQTc1RTBjNTk1QTU3NTUwRTZFMjY1MmIwNTE0QzY4QTYwYjMja2V5cy0xIiwidHlwIjoiSldUIn0.eyJpYXQiOjE2Nzg3MDEzMjEsImlzcyI6ImRpZDpldGhyOjB4RTFkODJBNzVFMGM1OTVBNTc1NTBFNkUyNjUyYjA1MTRDNjhBNjBiMyIsInZjIjp7IkBjb250ZXh0IjpbImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL3YxIiwiaHR0cHM6Ly9hcGkudmlkY2hhaW4ubmV0L2FwaS92MS9jb250ZXh0cy92MSJdLCJjcmVkZW50aWFsU3RhdHVzIjp7ImlkIjoiaHR0cHM6Ly9kZXYudmlkY2hhaW4ubmV0L2FwaS92MS9yZXZvY2F0aW9uL2NyZWRlbnRpYWwtc3RhdHVzL3N0YXR1cy1saXN0LzIwOS9jcmVkZW50aWFsLzI4Iiwic3RhdHVzTGlzdENyZWRlbnRpYWwiOiJodHRwczovL2Rldi52aWRjaGFpbi5uZXQvYXBpL3YxL3Jldm9jYXRpb24vc3RhdHVzLWxpc3QvMjA5Iiwic3RhdHVzTGlzdEluZGV4IjoiMjgiLCJ0eXBlIjoiUmV2b2NhdGlvbkxpc3QyMDIxIn0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImlkIjoiZGlkOmV0aHI6MHhFZUJCZERGQ2I1REYxMjFlMjFkNDUyNkNGNmI4NDdlRmFGYzNmZjgxIiwidGVzdCI6Im5ld1Rlc3QifSwiaWQiOiJodHRwczovL2FwaS52aWRjaGFpbi5uZXQvYXBpL3YxL3NjaGVtYXMvOTk5OSIsImlzc3VlciI6eyJpZCI6ImRpZDpldGhyOjB4RTFkODJBNzVFMGM1OTVBNTc1NTBFNkUyNjUyYjA1MTRDNjhBNjBiMyIsIm5hbWUiOiJUZXN0aW5nIERldmVsb3BlcnMifSwidHlwZSI6WyJWZXJpZmlhYmxlQ3JlZGVudGlhbCIsIlRlc3RUeXBlIl0sInZhbGlkVW50aWwiOiIyMDIzLTAzLTIzVDA5OjU1OjE3LjM2OVoifX0.ylMX9QM-GbowjXkDnpP4Z9kinZLIeY-OhrHp2f8xhWFvLNb0FUVeEQG5FvRcV_mEhp7qO9s-gWwYxHV7UxL-fQ',
    proofPurpose: 'assertionMethod',
    type: 'EcdsaSecp256k1Signature2019',
    verificationMethod:
      'did:ethr:0xE1d82A75E0c595A57550E6E2652b0514C68A60b3#keys-1',
  },
  type: ['VerifiableCredential', 'TestType'],
  validUntil: '2023-03-23T09:55:17.369Z',
};
const idTokenForEbsiPresentation =
  'eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzozYTFlM2RkYS1iOWVhLTQwYjctOGEwOS0wYjY5ZWQwZDMxMTYiLCJ0eXAiOiJKV1QifQ..YMc5aVAV6w4lDuevQJTC6IiOj6uxX5lXTaTLx-BIExlipUEzlp74MszZsSJJiNXDSraFWNa8Ek_vi9Lv0q7anKKUJYv2hwFAnC56qxncu-W2DiV0-t25dDKXoaPjH-UkEKTq4KlmD4E82z6S7MVlaX7GlclBYEP8D1gCdRNbmf7baMHYG5ra1nywAjxpKXO_cR5o9zBXhaawwld4UaFDbq4h_9WmmzPvlYRZtRgS8CVnW-du1YFQl064d_-10KfocAcaomO8l4HccsPNubxauiil3nli0OzWWaT8rmnSb1W3Q5xiSPzEh_T22t42iFy2ZiSG4naovALiu9VK5R02bBNPF-8qvd0yZR_GBkQscFblt1ab5uKuhF4Bzn2HpCuzc3BTigIhSiuZH2SBZT9BfmnDFnP0mII9qzVmqHXnhh7uHWCgl7o_vFtK9Xm2aEvbX5cTPmrZhR2B1V_60JEcr18zKzK_iw0l-hBaDY7TQHTpvOfxQhmppiWPg0O9aRMXnjdlbp_BMJDHKbcOQAZWz4tkNzOuWHnjiHld7w9otefSfmffr1PKZq3MefTRBKZMpnu2mQEQLqOTc-nBJo3sqh_x5xrflT2cMdMIzEBo-Zgzc1eni3vbygONUfTYbz7Tt6TsT2xC0EeYUxk5zRTWgwf5sk-ZxraS4-Tw1j0aDYM';
const ebsiCredential = {
  '@context': ['https://www.w3.org/2018/credentials/v1'],
  credentialSchema: {
    id: 'https://raw.githubusercontent.com/walt-id/waltid-ssikit-vclib/master/src/test/resources/schemas/VerifiableId.json',
    type: 'FullJsonSchemaValidator2021',
  },
  credentialSubject: {
    currentAddress: ['1 Boulevard de la Liberté, 59800 Lille'],
    dateOfBirth: '1993-04-08',
    familyName: 'DOE',
    firstName: 'Jane',
    gender: 'FEMALE',
    id: 'did:ebsi:ziMHcWikYoBeDiisG8DNeMJe8c4FTLDHaKQE56KjJfojw',
    nameAndFamilyNameAtBirth: 'Jane DOE',
    personalIdentifier: '0904008084H',
    placeOfBirth: 'LILLE, FRANCE',
  },
  evidence: [
    {
      documentPresence: ['Physical'],
      evidenceDocument: ['Passport'],
      subjectPresence: 'Physical',
      type: ['DocumentVerification'],
      verifier: 'did:ebsi:2A9BZ9SUe6BatacSpvs1V5CdjHvLpQ7bEsi2Jb6LdHKnQxaN',
    },
  ],
  id: 'urn:uuid:9ca8eb08-5c81-4217-a8e2-de9c14f69348',
  issuanceDate: '2023-02-28T08:39:42Z',
  issued: '2023-02-28T08:39:42Z',
  issuer:
    'did:jwk:eyJrdHkiOiJPS1AiLCJ1c2UiOiJzaWciLCJjcnYiOiJFZDI1NTE5Iiwia2lkIjoiN2Q2Y2JmMjQ4OWIzNDI3NmIxNzIxOTA1NDlkMjM5MTgiLCJ4IjoiRm5FVVVhdWRtOTlOMzBiODBqczhWdDRBbk94dlJ3WHRnUmNLcTNnQkl1OCIsImFsZyI6IkVkRFNBIn0',
  type: ['VerifiableCredential', 'VerifiableAttestation', 'VerifiableId'],
  validFrom: '2023-02-28T08:39:42Z',
};
describe('authorization service', () => {
  const openIdApi = mock<OpenIdApi>();
  const authorizationService = new AuthorizationService(openIdApi);
  it('should return the credential of the id_token when there is a did:ethr presentation', () => {
    const authorizationDto: AuthorizationDto = {
      code: 'code',
      redirectUri: 'redirectUri',
    };
    const oauthToken: OauthToken = {
      access_token: 'access_token',
      id_token: idTokenForEthrPresentation,
      expires_in: 3600,
      scope: 'openid',
      token_type: 'Bearer',
    };
    openIdApi.getOauthToken.mockResolvedValue(oauthToken);
    expect(authorizationService.authorize(authorizationDto)).resolves.toEqual({
      verifiableCredential: ethrCredential,
    });
  });

  it('should return the credential of the id_token when there is a did:ebsi presentation', () => {
    const authorizationDto: AuthorizationDto = {
      code: 'code',
      redirectUri: 'redirectUri',
    };
    const oauthToken: OauthToken = {
      access_token: 'access_token',
      id_token: idTokenForEbsiPresentation,
      expires_in: 3600,
      scope: 'openid',
      token_type: 'Bearer',
    };
    openIdApi.getOauthToken.mockResolvedValue(oauthToken);
    expect(authorizationService.authorize(authorizationDto)).resolves.toEqual({
      verifiableCredential: ebsiCredential,
    });
  });
});
