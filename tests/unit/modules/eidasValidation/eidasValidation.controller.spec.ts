import { HttpStatus, INestApplication } from '@nestjs/common';
import { mock } from 'jest-mock-extended';
import { Test, TestingModule } from '@nestjs/testing';
import * as request from 'supertest';
import { SERVICE } from '../../../../src/config';
import { EidasValidationService } from '../../../../src/modules/eidasValidation/eidasValidation.service';
import { VerifiableCredentialDto } from '../../../../src/modules/eidasValidation/eidasValidation.controller';
import { EidasValidationModule } from '../../../../src/modules/eidasValidation/eidasValidation.module';
import { pkcs7, pki } from 'node-forge';
import { X509Certificate } from 'crypto';
describe('EidasValidation controller', () => {
  let app: INestApplication;
  const eidasValidationService: EidasValidationService =
    mock<EidasValidationService>();

  beforeAll(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [EidasValidationModule],
    })
      .overrideProvider(EidasValidationService)
      .useValue(eidasValidationService)
      .compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  beforeEach(() => {
    jest.resetAllMocks();
  });

  afterAll(async () => {
    await app.close();
  });

  it('should validate an eidas seal from a Verifiable Credential', async () => {
    const expectedBase64Certificate =
      'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlIaFRDQ0JtMmdBd0lCQWdJUVNuS1BwZ0NRWUlSZmlxMG5SN0hHb3pBTkJna3Foa2lHOXcwQkFRc0ZBREJIDQpNUXN3Q1FZRFZRUUdFd0pGVXpFUk1BOEdBMVVFQ2d3SVJrNU5WQzFTUTAweEpUQWpCZ05WQkFzTUhFRkRJRU52DQpiWEJ2Ym1WdWRHVnpJRWx1Wm05eWJjT2hkR2xqYjNNd0hoY05NakF4TURFM01EZ3pOalUxV2hjTk1qTXhNREUzDQpNRGd6TmpVMFdqQ0JvREVMTUFrR0ExVUVCaE1DUlZNeER6QU5CZ05WQkFjTUJrMUJSRkpKUkRFWk1CY0dBMVVFDQpDZ3dRUms1TlZDMVNRMDBnVUZKVlJVSkJVekVPTUF3R0ExVUVDd3dGUTBWU1JWTXhFakFRQmdOVkJBVVRDVkV3DQpNREF3TURBd1NqRVlNQllHQTFVRVlRd1BWa0ZVUlZNdFVUQXdNREF3TURCS01TY3dKUVlEVlFRRERCNVRSVXhNDQpUeUJEVDAxUVQwNUZUbFJGSUZCU1ZVVkNRVk1nUlVsRVFWTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCDQpEd0F3Z2dFS0FvSUJBUURPSStNbGw1dXAwQ0Vwa2pUTlNwM3ZqZjA4WUNVWmo4d1FoaVgrRjNSL2Vsb2JwUTF5DQpkQ3Z2aWJPUTZ3bHVWSk54L05ZSTk1K3BZTkRVditORFFqUFdCSGpzam1YNnhidHNGR0sreldKWTQzcHR4RmU2DQpLMlpWY1VrOU9YNUhySG05d1J3NWlXc3FyUVdqMThTQnNkdm1Mc2VPWFNkWkk0dHdXd1dTQkpkK0NhL2Q0amk1DQppVkRLcXpxcklnS2tDbHhhdUtPTWhHVUdXR3h1L283UFJuektMUy93VytBVExzT3JqVElpaGpjaFlRWUh3WTJDDQpMOFRlV2N0Skd3YS9OTlpQbEplNjZ0TFBHc0N1SGFpUnczQzBDMzBORVhkVzB3RTd2VFhNTGF0OGpybFhLZ2dwDQpmaEM5eTBhSXRJMDVKaHFNTW4wbURvYU9lVVQ5UkxSbnFISVBBZ01CQUFHamdnUVJNSUlFRFRBTUJnTlZIUk1CDQpBZjhFQWpBQU1JR0JCZ2dyQmdFRkJRY0JBUVIxTUhNd093WUlLd1lCQlFVSE1BR0dMMmgwZEhBNkx5OXZZM053DQpZMjl0Y0M1alpYSjBMbVp1YlhRdVpYTXZiMk56Y0M5UFkzTndVbVZ6Y0c5dVpHVnlNRFFHQ0NzR0FRVUZCekFDDQpoaWhvZEhSd09pOHZkM2QzTG1ObGNuUXVabTV0ZEM1bGN5OWpaWEowY3k5QlEwTlBUVkF1WTNKME1JSUJOQVlEDQpWUjBnQklJQkt6Q0NBU2N3Z2dFWUJnb3JCZ0VFQWF4bUF3a1RNSUlCQ0RBcEJnZ3JCZ0VGQlFjQ0FSWWRhSFIwDQpjRG92TDNkM2R5NWpaWEowTG1adWJYUXVaWE12WkhCamN5OHdnZG9HQ0NzR0FRVUZCd0lDTUlITkRJSEtRMlZ5DQpkR2xtYVdOaFpHOGdZM1ZoYkdsbWFXTmhaRzhnWkdVZ2MyVnNiRzhnWld4bFkzUnl3N051YVdOdklITmxaOE82DQpiaUJ5Wldkc1lXMWxiblJ2SUdWMWNtOXdaVzhnWlVsRVFWTXVJRk4xYW1WMGJ5QmhJR3hoY3lCamIyNWthV05wDQpiMjVsY3lCa1pTQjFjMjhnWlhod2RXVnpkR0Z6SUdWdUlHeGhJRVJRUXlCa1pTQkdUazFVTFZKRFRTQmpiMjRnDQpUa2xHT2lCUk1qZ3lOakF3TkMxS0lDaERMMHB2Y21kbElFcDFZVzRnTVRBMkxUSTRNREE1TFUxaFpISnBaQzFGDQpjM0JodzdGaEtUQUpCZ2NFQUl2c1FBRUJNRHdHQTFVZEVRUTFNRE9rTVRBdk1TMHdLd1lKS3dZQkJBR3NaZ0VJDQpEQjVUUlV4TVR5QkRUMDFRVDA1RlRsUkZJRkJTVlVWQ1FWTWdSVWxFUVZNd0hRWURWUjBsQkJZd0ZBWUlLd1lCDQpCUVVIQXdJR0NDc0dBUVVGQndNRU1BNEdBMVVkRHdFQi93UUVBd0lGNERBZEJnTlZIUTRFRmdRVUwrN1NFUi9yDQpqWWJ0QVNHT3VIbnlzSVFhVm5Nd2diQUdDQ3NHQVFVRkJ3RURCSUdqTUlHZ01BZ0dCZ1FBamtZQkFUQUxCZ1lFDQpBSTVHQVFNQ0FROHdFd1lHQkFDT1JnRUdNQWtHQndRQWprWUJCZ0l3Y2dZR0JBQ09SZ0VGTUdnd01oWXNhSFIwDQpjSE02THk5M2QzY3VZMlZ5ZEM1bWJtMTBMbVZ6TDNCa2N5OVFSRk5mUTA5TlVGOWxjeTV3WkdZVEFtVnpNRElXDQpMR2gwZEhCek9pOHZkM2QzTG1ObGNuUXVabTV0ZEM1bGN5OXdaSE12VUVSVFgwTlBUVkJmWlc0dWNHUm1Fd0psDQpiakFmQmdOVkhTTUVHREFXZ0JRWitGZ3ZGTmFtekpzRW1BZ05UTmVyQUtlRFpUQ0I0QVlEVlIwZkJJSFlNSUhWDQpNSUhTb0lIUG9JSE1ob0dlYkdSaGNEb3ZMMnhrWVhCamIyMXdMbU5sY25RdVptNXRkQzVsY3k5RFRqMURVa3d4DQpMRTlWUFVGREpUSXdRMjl0Y0c5dVpXNTBaWE1sTWpCSmJtWnZjbTFoZEdsamIzTXNUejFHVGsxVUxWSkRUU3hEDQpQVVZUUDJObGNuUnBabWxqWVhSbFVtVjJiMk5oZEdsdmJreHBjM1E3WW1sdVlYSjVQMkpoYzJVL2IySnFaV04wDQpZMnhoYzNNOVkxSk1SR2x6ZEhKcFluVjBhVzl1VUc5cGJuU0dLV2gwZEhBNkx5OTNkM2N1WTJWeWRDNW1ibTEwDQpMbVZ6TDJOeWJITmpiMjF3TDBOU1RERXVZM0pzTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBRnVHRzk0ZGZBDQp0TlM2REJib25HMkNQV2NaYmFuMEhNK1pLSjBiSmV2Z2I4UnZHU2RwMGZXNTh4SmhObDVlcWM0aVdDT3JzLzR6DQpwZ2JiOEMzVlJYaDlndlJzTlQzWEUxV1FCVDBmUmI2Z2dUODRNRHVOcnFFT2NwNWduSndyditha1haZnZFbm9kDQpaTXRtYVBQQTZMcitRY0pRbWVGZnZoeUJEVkgwQzBiQ0Y5NzRldE5sN0Irb2laOEV0YlFVZjlvYm5BOThvdG1WDQpzN0lSN0ZOZVdnN1dJQ2ZhUzdGbzFkU2pTdGtYWDlwT1JmUk9CNHRsWHlTY2MvRm1xaytwUTVsbTlmSGs2MkZEDQo0OXpWNmlNN3VGL090Zml0YUp0cnJ0K3I1TTlrS2dLYStadkZNMDBRdVQzWDNDTEpUVEJycnhmTFI4L21XejhkDQpzdVk3VStWM2dpV1YNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg==';
    const expectedResponse = {
      valid: true,
      eidasCertInside: true,
      certInfo: {
        issuer: 'FNMT-RCM - AC Componentes InformÃ¡ticos',
        subject: 'FNMT-RCM PRUEBAS - AC Componentes InformÃ¡ticos',
        validFrom: Date.parse('2020-10-17T08:36:55.000Z'),
        validTo: Date.parse('2023-10-17T08:36:54.000Z'),
      },
      cert: expectedBase64Certificate,
    };
    eidasValidationService.validate = jest
      .fn()
      .mockResolvedValue(expectedResponse);

    const verifiableCredentialDto: VerifiableCredentialDto = {
      verifiableCredential: {
        '@context': ['https://www.w3.org/2018/credentials/v1'],
        id: 'https://example.com/credential/2390',
        type: ['VerifiableCredential'],
        issuer: 'did:ethr:0x5C6Ce5fB9Ce616507017eaA190659E771Aa2919e',
        issuanceDate: '2023-02-07T15:54:27.000Z',
        credentialSubject: {
          test: 'test',
        },
        proof: {
          type: 'EcdsaSecp256k1Signature2019',
          created: '2023-02-07T15:54:27.000Z',
          proofPurpose: 'assertionMethod',
          verificationMethod:
            'did:ethr:0x5C6Ce5fB9Ce616507017eaA190659E771Aa2919e#keys-1',
          jws: 'eyJhbGciOiJFUzI1NksiLCJraWQiOiJkaWQ6ZXRocjoweDVDNkNlNWZCOUNlNjE2NTA3MDE3ZWFBMTkwNjU5RTc3MUFhMjkxOWUja2V5cy0xIiwidHlwIjoiSldUIn0.eyJpYXQiOjE2NzU3ODUyNjcsImlzcyI6ImRpZDpldGhyOjB4NUM2Q2U1ZkI5Q2U2MTY1MDcwMTdlYUExOTA2NTlFNzcxQWEyOTE5ZSIsInZjIjp7IkBjb250ZXh0IjpbImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL3YxIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImNlcnRpZmljYXRlQmFzZTY0IjoiTUlJSHVqQ0NCYUtnQXdJQkFnSUlPbnFiV3o2T3VoTXdEUVlKS29aSWh2Y05BUUVMQlFBd2diZ3hDekFKQmdOVkJBWVRBa1ZUTVVRd1FnWURWUVFIRER0Q1lYSmpaV3h2Ym1FZ0tITmxaU0JqZFhKeVpXNTBJR0ZrWkhKbGMzTWdZWFFnZDNkM0xuVmhibUYwWVdOaExtTnZiUzloWkdSeVpYTnpLVEVXTUJRR0ExVUVDZ3dOVlVGT1FWUkJRMEVnVXk1QkxqRVZNQk1HQTFVRUN3d01WRk5RTFZWQlRrRlVRVU5CTVJvd0dBWURWUVFEREJGVlFVNUJWRUZEUVNCRFFURWdNakF4TmpFWU1CWUdBMVVFWVF3UFZrRlVSVk10UVRZMk56SXhORGs1TUI0WERUSXhNRFl3T1RFMk1URXdNRm9YRFRJek1EWXdPVEUyTVRFd01Gb3dkVEVMTUFrR0ExVUVCaE1DUlZNeEZ6QVZCZ05WQkFRTURrekRzM0JsZWlCRFlXSmxlbUZ6TVJFd0R3WURWUVFxREFoS2IyRnhkY090YmpFWU1CWUdBMVVFQlJNUFNVUkRSVk10TURNNU1EazFORFpaTVNBd0hnWURWUVFEREJkS2IyRnhkY090YmlCTXc3TndaWG9nUTJGaVpYcGhjekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFJWVJKU1FGa09sL2tHNldKUmQrYnJGdFBsY2NWN1QrL050K0xod3NUa21uaENnZXVBMDVnWnZWUHMydUQ4K3IvejhWTHV4ODNPa2pNaGM0cEpNQ09TOFBxaThlSzdnc3kwWU9oWHYzaGpqSzBtaTlPKzc5NHNYRldET1ZEY1dOelp1T3Zjek9oMHhTSTVhN3hMejFubDJmVWlOUkh3amZtTGhZVSs4SUtyWVlMTjZtWThPdms4SHYxZlRUbmZPRHFkWmFBSEtFdWxzQlhUcFlCaEFMZndRRHowTUpIMzE4TG5valdDRXprTEdCaWU5TzVoSHhDWmZtbE0vdTZCLytpbG9EL0dZVWtKVGV3Uy9heVovWkllSlBzdVo0RUt6ZnZUZ1MyMHFoa0ZaT1pOZ2dnQ2wvMUlVWFk5Vm1UZlZXaS9zNDIybEdNNXYyMGNCTGYrcnRWU3NDQXdFQUFhT0NBd2d3Z2dNRU1JSFhCZ2dyQmdFRkJRY0JBUVNCeWpDQnh6QlZCZ2dyQmdFRkJRY3dBb1pKYUhSMGNEb3ZMM2QzZHk1MVlXNWhkR0ZqWVM1amIyMHZjSFZpYkdsakwyUnZkMjVzYjJGa0wzUnpjRjlqWlhKMGFXWnBZMkYwWlhNdmMzVmliM0prYVc1aGRHVXhMbU55ZERBMkJnZ3JCZ0VGQlFjd0FZWXFhSFIwY0RvdkwyOWpjM0F4TG5WaGJtRjBZV05oTG1OdmJTOXdkV0pzYVdNdmNHdHBMMjlqYzNBdk1EWUdDQ3NHQVFVRkJ6QUJoaXBvZEhSd09pOHZiMk56Y0RJdWRXRnVZWFJoWTJFdVkyOXRMM0IxWW14cFl5OXdhMmt2YjJOemNDOHdIUVlEVlIwT0JCWUVGUCtXcnBwSUUwV2dJajJsWCtvelgyTGtrajZXTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVTFhIdnNHTi85ZjNnZ3lKRWYwUVFNSUZQVGVVd1ZRWUlLd1lCQlFVSEFRTUVTVEJITUFnR0JnUUFqa1lCQVRBTEJnWUVBSTVHQVFNQ0FROHdMZ1lHQkFDT1JnRUZEQ1JvZEhSd2N6b3ZMM2QzZHk1MVlXNWhkR0ZqWVM1amIyMHZjSFZpYkdsakwyTndjeTh3Z2FFR0ExVWRJQVNCbVRDQmxqQUpCZ2NFQUl2c1FBRUFNSUdJQmdzckJnRUVBWUx4TmdFQkFUQjVNREFHQ0NzR0FRVUZCd0lCRmlSb2RIUndjem92TDNkM2R5NTFZVzVoZEdGallTNWpiMjB2Y0hWaWJHbGpMMk53Y3k4d1JRWUlLd1lCQlFVSEFnSXdPUXczUTJWeWRHbG1hV05oWkc4Z1kzVmhiR2xtYVdOaFpHOGdaR1VnVUdWeWMyOXVZU0JHdzYxemFXTmhJR1Z1SUhOdlpuUjNZWEpsTGpDQmp3WURWUjBmQklHSE1JR0VNRUNnUHFBOGhqcG9kSFJ3T2k4dlkzSnNNUzUxWVc1aGRHRmpZUzVqYjIwdmNIVmliR2xqTDNCcmFTOWpjbXd2UTBFeGMzVmliM0prYVc1aFpHRXVZM0pzTUVDZ1BxQThoanBvZEhSd09pOHZZM0pzTWk1MVlXNWhkR0ZqWVM1amIyMHZjSFZpYkdsakwzQnJhUzlqY213dlEwRXhjM1ZpYjNKa2FXNWhaR0V1WTNKc01BNEdBMVVkRHdFQi93UUVBd0lGNERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFnWUlLd1lCQlFVSEF3UXdIZ1lEVlIwUkJCY3dGWUVUYW14alpXeHFkWE56UUdkdFlXbHNMbU52YlRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQU1ydVQ2OWFNSDBlMWFyeDQxWEwxcllvOVBVSHlwWjcwc0Q5TDJVNlJyTDFRYzY1Q0k1clVEQUpmTUtSMmZzR2NvNExUMU1KeGtEZyt0WCtmem5jYm12NVpIeHNuaG8wK1MvRGRMai91TnRHblU5ZjZtQjlLNjJIZWVFN2E5Q0o4cTFHejhac2xXNXhRcnZ0R2x5RmxmUWc2dDljQTJHNkVtL29YVWZtdzBiN2E3UE1SRlpIeDJWdXdGNmlTSS8ycXFJWVBhbU5UZWJqb0xaRHNqMys2WVczUVI5YUFHWEFXbGc3TEpvbktuc3pzUVF3Nml5SGxyUENlbTliQThNZG5aSlJPaktobm5HOC9OTmhub1dzNFhCMHh3WjBQMGV5YVdOVGh2WkRCNndGNmJEWWg4MnhyZ3dqUnRoN0ZndlhYdUlEQkk4U05TVDFyYUgzMEUzbUx0djdJSVl4dGxNMUx2aXh5ZFFMb08wN2dWNVBhNmY4eTB3RWU5VG9GbVgvOVcyUmhDQW5mOExHMEx1Q3VEMWEvUFFzelk3TzV3YkRxemsyclM4NHVJcXJFQzhWenQvVU03SjZHSm9QVTN4bmQvWWV6TXE0bDk4UXN2RmdkbDhQUXVXei9Yd05ZKytla1FkMmVpS2tXTUF3dWpHSGtEZGJxVjhMeWxVNG1mTVRVSUxlZWRLd0MzckpYY1dqRGhIRlB6a01uWHI1dTdtYTIwSk9yRHlWY1UyMWVTS3J3V3lTWG1uVkVhbWpZeThNeHlIMDBsQ250b0lNYjgvYmFtZzV1aEhXL09vS0tXRWhtWUd0Y21SVVpvcjVKME81WnNadWpON1htQ1AyMlJZdVF0VkM0dEloTkxyN1FRQW83blZlVkJtdlVVazNCK0hKaDhEWHladmhPN05zPSIsImV4cGlyYXRpb25EYXRlIjoiMDkvMDYvMjAyMyAxODoxMTowMCIsImlkIjoiZGlkOmV0aHI6MHhFZUJCZERGQ2I1REYxMjFlMjFkNDUyNkNGNmI4NDdlRmFGYzNmZjgxIiwiaXNzdWVyTGVnYWxJRCI6IiIsImlzc3Vlck5hbWUiOiJVQU5BVEFDQSBDQTEgMjAxNiIsIm5hbWUiOiJKb2FxdcOtbiBMw7NwZXogQ2FiZXphcyIsInN1YmplY3RMZWdhbElEIjoiSURDRVMtMDM5MDk1NDZZIn0sImlkIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9jcmVkZW50aWFsLzIzOTAiLCJpc3N1ZXIiOiJkaWQ6ZXRocjoweDVDNkNlNWZCOUNlNjE2NTA3MDE3ZWFBMTkwNjU5RTc3MUFhMjkxOWUiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiTGFyZ2VGYW1pbHlDYXJkIl19fQ.xAeMomAiC6q_m3pLKosUTZcWc9xDNx5dlN7uHGfGAbCfvACrn--XNXV2A9jauho4Wj1jvpEDLUILYk-064Xj1g',
        },
      },
    };

    const response = await request(app.getHttpServer())
      .post(`${SERVICE.BACKEND_PATHS.VALIDATE}`)
      .send(verifiableCredentialDto);
    expect(response.status).toBe(HttpStatus.OK);
    expect(response.body).toStrictEqual(expectedResponse);
  });
});
