trigger:
  branches:
    include:
      - development
  paths:
    include:
      - universal-verifier-back
pr: none

resources:
  - repo: self

variables:
  # Docker Buildkit improves image build performance
  DOCKER_BUILDKIT: 1
  # Image repository
  Repo: 'universal-verifier-back'
  RepoEndpoint: 'k8scrvidchaindev.azurecr.io/$(Repo)'
  # Repository directory
  dir: 'universal-verifier-back/'
  # Dockerfile
  Dockerfile: '$(dir)/Dockerfile'
  # Kubernetes YAML
  k8s: '$(dir)/k8s/k8s-dev.yml'
  # Configmaps
  configMap: '$(dir)/k8s/configmap-dev.yml'
  # package.json
  packageJson: '$(dir)/package.json'
  # coverage tests directory
  coverage: '$(dir)/coverage'
  # run unit test: true/false
  runUnitTests: 'false'
  # test run title
  testRunName: '[dev] universal-verifier-back unit tests'
  # Kubernetes namespace
  namespace: 'development'
  # Image tagging: application version - build
  tag: $(Build.BuildNumber)
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
  - stage: UnitTests
    displayName: 'Unit test stage'
    jobs:
      - job: GetPackageVersion
        displayName: 'Retrieve package.json version to update build number'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: 'Use node'
          - script: |
              npmVersionString=$(node -p "require('./$(packageJson)').version")
              commit=$(Build.SourceVersion)
              shortCommit=${commit:0:7}
              echo "##vso[build.updatebuildnumber]$npmVersionString-commit.$shortCommit"
            displayName: 'retrieve $(packageJson) version'
      - job: RunUnitTests
        displayName: 'Run unit tests: $(variables.runUnitTests)'
        pool:
          vmImage: $(vmImageName)
        dependsOn: GetPackageVersion
        condition: eq('${{ variables.runUnitTests}}', 'true')
        steps:
          - task: Npm@1
            inputs:
              command: 'install'
              workingDir: $(dir)
          - script: |
              npm run --prefix $(dir) test:unit
            displayName: 'npm run test:unit'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'junit.xml'
              searchFolder: '$(coverage)'
              failTaskOnFailedTests: true
              testRunTitle: '$(testRunName)'
  - stage: 'Build'
    jobs:
      - job: Build
        displayName: 'Build universal-verifier-back'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Login ACR
            inputs:
              command: login
              containerRegistry: $(dockerRegistryServiceConnection)
          - script: 'docker pull $(RepoEndpoint):latest'
            displayName: Pull latest for layer caching
            continueOnError: true # for first build, no cache
          - task: Docker@2
            displayName: 'build --cache-from=$(RepoEndpoint):latest'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(Repo)'
              command: 'build'
              Dockerfile: $(Dockerfile)
              arguments: '--cache-from=$(RepoEndpoint):latest'
              tags: |
                $(tag)
                latest
          - task: Docker@2
            displayName: 'push'
            inputs:
              command: push
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: $(Repo)
              tags: |
                $(tag)
                latest
  - stage: Deploy
    displayName: 'Deploy stage'
    dependsOn: Build
    jobs:
      - deployment: Deploy
        displayName: 'Deploy universal-verifier-back'
        pool:
          vmImage: $(vmImageName)
        environment: 'development'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  fetchDepth: 1
                - task: Kubernetes@1
                  displayName: Create/update configmap
                  inputs:
                    connectionType: Azure Resource Manager
                    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
                    azureResourceGroup: $(azureResourceGroup)
                    kubernetesCluster: $(kubernetesCluster)
                    command: apply
                    arguments: -f $(configMap) -n $(namespace)
                - task: KubernetesManifest@0
                  displayName: Create/update deployment
                  inputs:
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    namespace: $(namespace)
                    manifests: $(k8s)
                    containers: |
                      $(RepoEndpoint):$(tag)
